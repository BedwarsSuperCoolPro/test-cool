-- // Loaded Check \\ -- 
if not game:IsLoaded() then
	game.Loaded:Wait()
end

-- // Functions \\ -- 
function StartsWith(Stri, SearchString, RawPos)
	local Pos = RawPos or 1 
	return SearchString == "" and true or string.sub(Stri, Pos, Pos)
end

function Trim(Stri)
	return string.gsub(Stri, "^%s*(.-)%s*$", "%1")
end

function GetPlayer(Args, Speaker)
	local Found = {}
	if Args:lower() == "me" then
		return {Speaker}
	elseif Args:lower() == "all" then
		local Plrs = {}
		for _, v in pairs(game.Players:GetPlayers()) do
			if v ~= Speaker then
				table.insert(Plrs, v)
			end
		end
		return Plrs
	elseif Args:lower() == "random" then
		return {game.Players:GetPlayers()[math.random(1,#game.Players:GetPlayers())]}
	else
		for _, v in pairs(game.Players:GetPlayers()) do
			if string.sub(v.Name:lower(),1,#Args) == Args:lower() or string.sub(v.DisplayName:lower(),1,#Args) == Args:lower() then
				table.insert(Found, v)
			end
		end
	end
	return Found
end

function GetRoot(Char)
	return Char and Char:FindFirstChild("HumanoidRootPart") or Char:FindFirstChild("UpperTorso") or Char:FindFirstChild("LowerTorso")
end

function GetAllClosestToRootPostion()
	local Closest, Range = {}, 15 
	for _, v in pairs(game.Players:GetChildren()) do
		if v ~= game.Players.LocalPlayer then
			local Distance = (GetRoot(game.Players.LocalPlayer.Character).Position - GetRoot(v.Character).Position).Magnitude 
			if Distance <= Range then
				Range = Distance 
				table.insert(Closest, v)
			end
		end
	end
	return Closest
end

function Notify(Title, Text, Duration)
	game.StarterGui:SetCore("SendNotification",{
		Title = Title,
		Text = Text,
		Duration = Duration
	})
end

-- // Configuration \\ -- 
local SettingsTbl = {Prefix = "/", AutoExecute = false}

function WriteConfig()
	local Json = game:GetService("HttpService"):JSONEncode(SettingsTbl)
	writefile("VoxelConfig.json", Json)
end

function GetConfig()
	if isfile("VoxelConfig.json") then
		return game:GetService("HttpService"):JSONDecode(readfile("VoxelConfig.json"))
	else
		WriteConfig()
		return game:GetService("HttpService"):JSONDecode(readfile("VoxelConfig.json"))
	end
end

function SetConfig(Con)
	if not isfile("VoxelConfig.json") then
		WriteConfig()
	end
	local NewConfig = GetConfig()
	for i,v in pairs(Con) do
		NewConfig[i] = v 
	end
	writefile("VoxelConfig.json", game:GetService("HttpService"):JSONEncode(NewConfig))
end

local Config = GetConfig()
local Prefix = Config.Prefix or "/"
local AutoExecute = Config.AutoExecute or false 

-- // Commands  \\ -- 
local CommandsTbl = {}

function AddCommand(Name, Aliases, Function)
	CommandsTbl[Name] = {["Name"] = Name, ["Aliases"] = Aliases, ["Function"] = Function}
	for _, v in pairs(Aliases) do
		CommandsTbl[v] = {["Name"] = v, ["Aliases"] = Aliases, ["Function"] = Function}
	end
end

AddCommand("goto", {}, function(Args, Speaker)
	for i,v in pairs(GetPlayer(Args[2], Speaker)) do
		GetRoot(Speaker.Character).CFrame = GetRoot(v.Character).CFrame * CFrame.new(0,0,2)
	end
end)

AddCommand("loopgoto", {}, function(Args, Speaker)
	for i,v in pairs(GetPlayer(Args[2], Speaker)) do
		LoopG = v 
		task.spawn(function()
			repeat wait()
				if game.Players:FindFirstChild(v.Name) then
					GetRoot(Speaker.Character).CFrame = GetRoot(v.Character).CFrame * CFrame.new(0,0,2)
				else
					LoopG = nil 
					Notify("Notification", "Loopteleport stopped (target left)", 3)
				end
			until LoopG ~= v 
		end)
		Notify("Notification", "Loop teleporting to " .. v.Name, 3)
	end
end)

AddCommand("givetool", {}, function(Args, Speaker)
	for i,v in pairs(game.ReplicatedStorage.Tools:GetChildren()) do
		if v.Name:lower() == Args[2]:lower() then
			game.ReplicatedStorage.Events.Backpack.BackpackClickBE:Fire(v.Name)
			game.ReplicatedStorage.Events.Backpack.ToolEquipRE:FireServer(v.Name)
			Notify("Notification", "Gave tool " .. v.Name)
		end
	end
end)

AddCommand("fling", {}, function(Args, Speaker)
	for i,v in pairs(GetPlayer(Args[2], Speaker)) do
		game.ReplicatedStorage.events.PushRE:FireServer(v)
		game.ReplicatedStorage.events.push:FireServer(v, GetRoot(v.Character))
	end
end)

AddCommand("loopfling", {}, function(Args, Speaker)
	for i,v in pairs(GetPlayer(Args[2], Speaker)) do
		LoopF = v 
		task.spawn(function()
			repeat wait()
				if game.Players:FindFirstChild(v.Name) then
					game.ReplicatedStorage.events.PushRE:FireServer(v)
					game.ReplicatedStorage.events.push:FireServer(v, GetRoot(v.Character))
				else
					LoopF = nil 
					Notify("Notification", "Loopfling stopped (target left)", 3)
				end
			until LoopF ~= v 
		end)
		Notify("Notification", "Loop flinging " .. v.Name, 3)
	end
end)

AddCommand("unloopfling", {}, function(Args, Speaker)
	LoopF = nil 
	Notify("Notification", "Loopfling stopped", 3)
end)

AddCommand("unloopgoto", {}, function(Args, Speaker)
	LoopG = nil 
	Notify("Notification", "Loopteleport stopped", 3)
end)

AddCommand("prefix", {}, function(Args, Speaker)
	local NewPrefix = Args[2]
	Prefix = NewPrefix
	SetConfig({["Prefix"] = NewPrefix, ["AutoExecute"] = AutoExecute})
	Notify("Notification", string.format("Prefix changed, new prefix: '%s'", NewPrefix))
end)

AddCommand("autoexecute", {}, function(Args, Speaker)
	AutoExecute = true 
	SetConfig({["Prefix"] = Prefix, ["AutoExecute"] = AutoExecute})
	Notify("Notification", "AutoExecute enabled")
end)

AddCommand("unautoexecute", {}, function(Args, Speaker)
	AutoExecute = false 
	SetConfig({["Prefix"] = Prefix, ["AutoExecute"] = AutoExecute})
	Notify("Notification", "AutoExecute disabled")
end)

AddCommand("rejoin", {}, function(Args, Speaker)
	game:GetService("TeleportService"):Teleport(game.PlaceId)
	Notify("Notification", "Rejoining sever...")
end)

-- // Chatted Check \\ -- 
game.Players.LocalPlayer.Chatted:Connect(function(Raw)
	local Message = Raw 
	if StartsWith(Raw, Prefix) then
		Raw = string.sub(Raw, #Prefix + 1)
	end
	Message = Trim(Raw) 

	local Split = string.split(Message, " ")
	if CommandsTbl[Split[1]] then
		CommandsTbl[Split[1]].Function(Split)
	end
end)

-- // Teleport Check \\ -- 
game.Players.LocalPlayer.OnTeleport:Connect(function(State)
	if State == Enum.TeleportState.Started and AutoExecute then
		syn.queue_on_teleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/BedwarsSuperCoolPro/test-cool/main/CoolAdminScript', true))()")
	end
end)
